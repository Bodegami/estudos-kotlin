- let "inline fun <T, R> T.let(block: (T)-> R): R"
    Trabalha com o objeto de contexto como argumento
    Opera com o resultado de uma ou mais funções e com valores nulos
    Cria variável com um escopo mais limitado com alguma modificação

- with "inline fun <T, R> with(receiver: T, block: T.()-> R): R"
    Trabalha com o objeto de contexto como um receiver
    Não é uma função de extensão
    Chama memebros do objeto de contexto diretamente
    também é usado para computrar algo com o receptor e retornar o valor
    Em código lemos "com esse objeto, faça"

- run "inline fun <T,R> T.run(block: T.()-> R): R"
    Trabalha com o objeto de contexto como um receiver
    Similar a proposta do let, mas o uso é parecido com o with
    Utiliza na inicialização de um objeto
    Retorna a computação do objeto

- run sem extensão "inline fun <R> run(block: ()-> R): R"
    Não tem objeto de contexto
    Similar a execução do with, mas nçao recebe nenhum objeto
    Executa um bloco de código e retorna a sua computação.

- apply "inline fun <T> T.apply(block: T.()-> Unit): T"
    Trabalha com o objeto de contexto como um receiver
    Recebe e retorna o objeto de contexto
    Configura o objeto de contexto sem fazer computações
    Em código lemos "Aplique as seguintes atribuições ao objeto"

- also "inline fun <T> T.also(block: (T)-> Unit): T"
    Trabalha com o objeto de contexto como argumento
    Igual ao apply em retorno
    Realiza ações a mais que não modificam o objeto
    A remoção do also não deve afetar o programa
    em código lemos "também faça isso"

- takeIf e takeUnless
    Utilizados para verificar o estado do objeto
    Renato o objeto ou null dependendo do predicado:
        - Verdadeiro: takeIf()
        - Falso: takeUnless()


